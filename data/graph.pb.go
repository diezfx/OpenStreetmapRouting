// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: graph.proto

package data

import (
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type NodeType int32

const (
	NodeType_Road            NodeType = 0
	NodeType_GasStation      NodeType = 1
	NodeType_ChargingStation NodeType = 2
)

var NodeType_name = map[int32]string{
	0: "Road",
	1: "GasStation",
	2: "ChargingStation",
}

var NodeType_value = map[string]int32{
	"Road":            0,
	"GasStation":      1,
	"ChargingStation": 2,
}

func (x NodeType) String() string {
	return proto.EnumName(NodeType_name, int32(x))
}

func (NodeType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{0}
}

type Edge struct {
	ID    int64   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	Start int64   `protobuf:"varint,2,opt,name=start,proto3" json:"start,omitempty"`
	End   int64   `protobuf:"varint,3,opt,name=end,proto3" json:"end,omitempty"`
	Speed float64 `protobuf:"fixed64,4,opt,name=speed,proto3" json:"speed,omitempty"`
	Cost  int64   `protobuf:"varint,5,opt,name=cost,proto3" json:"cost,omitempty"`
}

func (m *Edge) Reset()         { *m = Edge{} }
func (m *Edge) String() string { return proto.CompactTextString(m) }
func (*Edge) ProtoMessage()    {}
func (*Edge) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{0}
}
func (m *Edge) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Edge) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Edge.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Edge) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Edge.Merge(m, src)
}
func (m *Edge) XXX_Size() int {
	return m.Size()
}
func (m *Edge) XXX_DiscardUnknown() {
	xxx_messageInfo_Edge.DiscardUnknown(m)
}

var xxx_messageInfo_Edge proto.InternalMessageInfo

func (m *Edge) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Edge) GetStart() int64 {
	if m != nil {
		return m.Start
	}
	return 0
}

func (m *Edge) GetEnd() int64 {
	if m != nil {
		return m.End
	}
	return 0
}

func (m *Edge) GetSpeed() float64 {
	if m != nil {
		return m.Speed
	}
	return 0
}

func (m *Edge) GetCost() int64 {
	if m != nil {
		return m.Cost
	}
	return 0
}

type Node struct {
	ID     int64    `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`
	ID_Osm int64    `protobuf:"varint,2,opt,name=ID_Osm,json=IDOsm,proto3" json:"ID_Osm,omitempty"`
	Lat    float64  `protobuf:"fixed64,3,opt,name=lat,proto3" json:"lat,omitempty"`
	Lon    float64  `protobuf:"fixed64,4,opt,name=lon,proto3" json:"lon,omitempty"`
	Type   NodeType `protobuf:"varint,5,opt,name=type,proto3,enum=data.NodeType" json:"type,omitempty"`
}

func (m *Node) Reset()         { *m = Node{} }
func (m *Node) String() string { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()    {}
func (*Node) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{1}
}
func (m *Node) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Node) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Node.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Node) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Node.Merge(m, src)
}
func (m *Node) XXX_Size() int {
	return m.Size()
}
func (m *Node) XXX_DiscardUnknown() {
	xxx_messageInfo_Node.DiscardUnknown(m)
}

var xxx_messageInfo_Node proto.InternalMessageInfo

func (m *Node) GetID() int64 {
	if m != nil {
		return m.ID
	}
	return 0
}

func (m *Node) GetID_Osm() int64 {
	if m != nil {
		return m.ID_Osm
	}
	return 0
}

func (m *Node) GetLat() float64 {
	if m != nil {
		return m.Lat
	}
	return 0
}

func (m *Node) GetLon() float64 {
	if m != nil {
		return m.Lon
	}
	return 0
}

func (m *Node) GetType() NodeType {
	if m != nil {
		return m.Type
	}
	return NodeType_Road
}

type Graph struct {
	Nodes []Node `protobuf:"bytes,1,rep,name=nodes,proto3" json:"nodes"`
	Edges []Edge `protobuf:"bytes,2,rep,name=edges,proto3" json:"edges"`
}

func (m *Graph) Reset()         { *m = Graph{} }
func (m *Graph) String() string { return proto.CompactTextString(m) }
func (*Graph) ProtoMessage()    {}
func (*Graph) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{2}
}
func (m *Graph) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Graph) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Graph.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Graph) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Graph.Merge(m, src)
}
func (m *Graph) XXX_Size() int {
	return m.Size()
}
func (m *Graph) XXX_DiscardUnknown() {
	xxx_messageInfo_Graph.DiscardUnknown(m)
}

var xxx_messageInfo_Graph proto.InternalMessageInfo

func (m *Graph) GetNodes() []Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

func (m *Graph) GetEdges() []Edge {
	if m != nil {
		return m.Edges
	}
	return nil
}

type GasStations struct {
	Stations map[int64]Node `protobuf:"bytes,1,rep,name=stations,proto3" json:"stations" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *GasStations) Reset()         { *m = GasStations{} }
func (m *GasStations) String() string { return proto.CompactTextString(m) }
func (*GasStations) ProtoMessage()    {}
func (*GasStations) Descriptor() ([]byte, []int) {
	return fileDescriptor_3e4c656902fc0e6b, []int{3}
}
func (m *GasStations) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GasStations) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GasStations.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GasStations) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GasStations.Merge(m, src)
}
func (m *GasStations) XXX_Size() int {
	return m.Size()
}
func (m *GasStations) XXX_DiscardUnknown() {
	xxx_messageInfo_GasStations.DiscardUnknown(m)
}

var xxx_messageInfo_GasStations proto.InternalMessageInfo

func (m *GasStations) GetStations() map[int64]Node {
	if m != nil {
		return m.Stations
	}
	return nil
}

func init() {
	proto.RegisterEnum("data.NodeType", NodeType_name, NodeType_value)
	proto.RegisterType((*Edge)(nil), "data.Edge")
	proto.RegisterType((*Node)(nil), "data.Node")
	proto.RegisterType((*Graph)(nil), "data.Graph")
	proto.RegisterType((*GasStations)(nil), "data.GasStations")
	proto.RegisterMapType((map[int64]Node)(nil), "data.GasStations.StationsEntry")
}

func init() { proto.RegisterFile("graph.proto", fileDescriptor_3e4c656902fc0e6b) }

var fileDescriptor_3e4c656902fc0e6b = []byte{
	// 403 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0x41, 0x6b, 0xd4, 0x40,
	0x18, 0xcd, 0x64, 0x27, 0x65, 0xf9, 0x16, 0xd7, 0x65, 0x54, 0x18, 0x7a, 0x48, 0x97, 0x1c, 0x64,
	0x11, 0x4c, 0xa1, 0x5e, 0xd4, 0x9b, 0x35, 0x65, 0xc9, 0xc5, 0x42, 0x14, 0x3c, 0xca, 0x6c, 0x67,
	0x9c, 0x2c, 0x76, 0x33, 0x21, 0x33, 0x11, 0xf2, 0x2f, 0xbc, 0xfa, 0x8f, 0x7a, 0xec, 0xd1, 0x93,
	0xc8, 0xee, 0x1f, 0x91, 0xf9, 0x92, 0xd8, 0x16, 0x6f, 0xef, 0x7b, 0xef, 0x7d, 0x79, 0xf9, 0x1e,
	0x03, 0x33, 0xdd, 0x88, 0xba, 0x4c, 0xeb, 0xc6, 0x38, 0xc3, 0xa8, 0x14, 0x4e, 0x1c, 0xbf, 0xd4,
	0x5b, 0x57, 0xb6, 0x9b, 0xf4, 0xca, 0xec, 0x4e, 0xb5, 0xd1, 0xe6, 0x14, 0xc5, 0x4d, 0xfb, 0x15,
	0x27, 0x1c, 0x10, 0xf5, 0x4b, 0x49, 0x09, 0xf4, 0x42, 0x6a, 0xc5, 0xe6, 0x10, 0xe6, 0x19, 0x27,
	0x4b, 0xb2, 0x9a, 0x14, 0x61, 0x9e, 0xb1, 0xa7, 0x10, 0x59, 0x27, 0x1a, 0xc7, 0x43, 0xa4, 0xfa,
	0x81, 0x2d, 0x60, 0xa2, 0x2a, 0xc9, 0x27, 0xc8, 0x79, 0x88, 0xbe, 0x5a, 0x29, 0xc9, 0xe9, 0x92,
	0xac, 0x48, 0xd1, 0x0f, 0x8c, 0x01, 0xbd, 0x32, 0xd6, 0xf1, 0x08, 0x8d, 0x88, 0x93, 0x16, 0xe8,
	0x07, 0x23, 0xff, 0x4f, 0x7a, 0x06, 0x47, 0x79, 0xf6, 0xe5, 0xd2, 0xee, 0xc6, 0xa8, 0x3c, 0xbb,
	0xb4, 0x3b, 0x1f, 0x75, 0x2d, 0x1c, 0x46, 0x91, 0xc2, 0x43, 0x64, 0x4c, 0x35, 0x04, 0x79, 0xc8,
	0x12, 0xa0, 0xae, 0xab, 0x15, 0xc6, 0xcc, 0xcf, 0xe6, 0xa9, 0x2f, 0x20, 0xf5, 0x21, 0x9f, 0xba,
	0x5a, 0x15, 0xa8, 0x25, 0x9f, 0x21, 0x5a, 0xfb, 0x92, 0xd8, 0x73, 0x88, 0x2a, 0x23, 0x95, 0xe5,
	0x64, 0x39, 0x59, 0xcd, 0xce, 0xe0, 0xce, 0x7d, 0x4e, 0x6f, 0x7e, 0x9f, 0x04, 0x45, 0x2f, 0x7b,
	0x9f, 0x92, 0x5a, 0x59, 0x1e, 0xde, 0xf7, 0xf9, 0x92, 0x46, 0x1f, 0xca, 0xc9, 0x4f, 0x02, 0xb3,
	0xb5, 0xb0, 0x1f, 0x9d, 0x70, 0x5b, 0x53, 0x59, 0xf6, 0x0e, 0xa6, 0x76, 0xc0, 0x43, 0xc4, 0x49,
	0xbf, 0x7a, 0xcf, 0x94, 0x8e, 0xe0, 0xa2, 0x72, 0x4d, 0x37, 0x7c, 0xef, 0xdf, 0xda, 0xf1, 0x1a,
	0x1e, 0x3d, 0x30, 0xf8, 0x93, 0xbf, 0xa9, 0x6e, 0x28, 0xcb, 0x43, 0xb6, 0x84, 0xe8, 0xbb, 0xb8,
	0x6e, 0x15, 0x96, 0xf5, 0xe0, 0x8a, 0xa2, 0x17, 0xde, 0x86, 0xaf, 0xc9, 0x8b, 0x37, 0x30, 0x1d,
	0x6b, 0x60, 0x53, 0xa0, 0x85, 0x11, 0x72, 0x11, 0xb0, 0x39, 0xc0, 0xdd, 0xbf, 0x2c, 0x08, 0x7b,
	0x02, 0x8f, 0xdf, 0x97, 0xa2, 0xd1, 0xdb, 0x4a, 0x8f, 0x64, 0x78, 0xce, 0x6f, 0xf6, 0x31, 0xb9,
	0xdd, 0xc7, 0xe4, 0xcf, 0x3e, 0x26, 0x3f, 0x0e, 0x71, 0x70, 0x7b, 0x88, 0x83, 0x5f, 0x87, 0x38,
	0xd8, 0x1c, 0xe1, 0x8b, 0x79, 0xf5, 0x37, 0x00, 0x00, 0xff, 0xff, 0xa5, 0x62, 0x2b, 0x5d, 0x75,
	0x02, 0x00, 0x00,
}

func (m *Edge) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Edge) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.ID))
	}
	if m.Start != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Start))
	}
	if m.End != 0 {
		dAtA[i] = 0x18
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.End))
	}
	if m.Speed != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Speed))))
		i += 8
	}
	if m.Cost != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Cost))
	}
	return i, nil
}

func (m *Node) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Node) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.ID != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.ID))
	}
	if m.ID_Osm != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.ID_Osm))
	}
	if m.Lat != 0 {
		dAtA[i] = 0x19
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lat))))
		i += 8
	}
	if m.Lon != 0 {
		dAtA[i] = 0x21
		i++
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Lon))))
		i += 8
	}
	if m.Type != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintGraph(dAtA, i, uint64(m.Type))
	}
	return i, nil
}

func (m *Graph) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Graph) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, msg := range m.Nodes {
			dAtA[i] = 0xa
			i++
			i = encodeVarintGraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Edges) > 0 {
		for _, msg := range m.Edges {
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraph(dAtA, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	return i, nil
}

func (m *GasStations) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GasStations) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for k, _ := range m.Stations {
			dAtA[i] = 0xa
			i++
			v := m.Stations[k]
			msgSize := 0
			if (&v) != nil {
				msgSize = (&v).Size()
				msgSize += 1 + sovGraph(uint64(msgSize))
			}
			mapSize := 1 + sovGraph(uint64(k)) + msgSize
			i = encodeVarintGraph(dAtA, i, uint64(mapSize))
			dAtA[i] = 0x8
			i++
			i = encodeVarintGraph(dAtA, i, uint64(k))
			dAtA[i] = 0x12
			i++
			i = encodeVarintGraph(dAtA, i, uint64((&v).Size()))
			n1, err := (&v).MarshalTo(dAtA[i:])
			if err != nil {
				return 0, err
			}
			i += n1
		}
	}
	return i, nil
}

func encodeVarintGraph(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Edge) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGraph(uint64(m.ID))
	}
	if m.Start != 0 {
		n += 1 + sovGraph(uint64(m.Start))
	}
	if m.End != 0 {
		n += 1 + sovGraph(uint64(m.End))
	}
	if m.Speed != 0 {
		n += 9
	}
	if m.Cost != 0 {
		n += 1 + sovGraph(uint64(m.Cost))
	}
	return n
}

func (m *Node) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.ID != 0 {
		n += 1 + sovGraph(uint64(m.ID))
	}
	if m.ID_Osm != 0 {
		n += 1 + sovGraph(uint64(m.ID_Osm))
	}
	if m.Lat != 0 {
		n += 9
	}
	if m.Lon != 0 {
		n += 9
	}
	if m.Type != 0 {
		n += 1 + sovGraph(uint64(m.Type))
	}
	return n
}

func (m *Graph) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Nodes) > 0 {
		for _, e := range m.Nodes {
			l = e.Size()
			n += 1 + l + sovGraph(uint64(l))
		}
	}
	if len(m.Edges) > 0 {
		for _, e := range m.Edges {
			l = e.Size()
			n += 1 + l + sovGraph(uint64(l))
		}
	}
	return n
}

func (m *GasStations) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Stations) > 0 {
		for k, v := range m.Stations {
			_ = k
			_ = v
			l = v.Size()
			mapEntrySize := 1 + sovGraph(uint64(k)) + 1 + l + sovGraph(uint64(l))
			n += mapEntrySize + 1 + sovGraph(uint64(mapEntrySize))
		}
	}
	return n
}

func sovGraph(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozGraph(x uint64) (n int) {
	return sovGraph(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Edge) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Edge: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Edge: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Start", wireType)
			}
			m.Start = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Start |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field End", wireType)
			}
			m.End = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.End |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Speed", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Speed = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cost", wireType)
			}
			m.Cost = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cost |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Node) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Node: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Node: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			m.ID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID_Osm", wireType)
			}
			m.ID_Osm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ID_Osm |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lat", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lat = float64(math.Float64frombits(v))
		case 4:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lon", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Lon = float64(math.Float64frombits(v))
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= (NodeType(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Graph) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Graph: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Graph: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nodes", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Nodes = append(m.Nodes, Node{})
			if err := m.Nodes[len(m.Nodes)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Edges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Edges = append(m.Edges, Edge{})
			if err := m.Edges[len(m.Edges)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GasStations) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GasStations: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GasStations: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Stations", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthGraph
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Stations == nil {
				m.Stations = make(map[int64]Node)
			}
			var mapkey int64
			mapvalue := &Node{}
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapkey |= (int64(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return ErrIntOverflowGraph
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= (int(b) & 0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return ErrInvalidLengthGraph
					}
					postmsgIndex := iNdEx + mapmsglen
					if mapmsglen < 0 {
						return ErrInvalidLengthGraph
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &Node{}
					if err := mapvalue.Unmarshal(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := skipGraph(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if skippy < 0 {
						return ErrInvalidLengthGraph
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.Stations[mapkey] = *mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipGraph(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthGraph
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipGraph(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowGraph
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowGraph
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthGraph
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowGraph
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipGraph(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthGraph = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowGraph   = fmt.Errorf("proto: integer overflow")
)
